/*С помощью классов реализуйте программу имитации работы аудиоплеера. В плеере
находится несколько аудиозаписей, доступных для воспроизведения. Для них вы
должны создать отдельный класс Track. Полями этого класса должны быть: название,
дата создания (здесь вы можете использовать тип std::tm) и продолжительность
записи в секундах. Сам плеер тоже реализуйте с помощью класса. Внутри он должен
содержать список доступных записей и нужные для логики работы плеера поля.

Пользователь взаимодействует с программой с помощью команд:

• Команда play запрашивает у пользователя название записи для воспроизведения и
начинает её воспроизведение. Воспроизведение симулируется с помощью вывода в
консоль всей информации о записи. Если произведение какой-то записи уже начато,
ничего не происходит. • Команда pause. Ставит запись на паузу, о чём выводит
соответствующее сообщение в консоль. Если запись уже на паузе или не
воспроизводится вовсе, ничего не происходит. • Команда next переходит к
следующей записи для воспроизведения. Запись при этом выбирается случайно, как
будто плеер работает в режиме shuffle. • Команда stop прекращает воспроизведение
текущей записи, если таковая имеется. Об этом выводится сообщение в консоль. Два
раза остановить воспроизведение невозможно, так что команда должна срабатывать
только в первом случае. • Команда exit — выход из программы.*/

#include "player.h"
#include "track.h"
#include <iostream>
#include <string>

int main() {
  Player player;

  player.addToPlayList(
      Track("track1", {0, 0, 0, 15, 5, 2023 - 1900, 0, 0, 0}, 200));
  player.addToPlayList(
      Track("track2", {0, 0, 0, 20, 11, 2020 - 1900, 0, 0, 0}, 250));
  player.addToPlayList(
      Track("track3", {0, 0, 0, 10, 1, 2022 - 1900, 0, 0, 0}, 300));
  player.addToPlayList(
      Track("track4", {0, 0, 0, 11, 2, 2023 - 1900, 0, 0, 0}, 350));
  player.addToPlayList(
      Track("track5", {0, 0, 0, 14, 3, 2000 - 1900, 0, 0, 0}, 400));

  std::string command;
  bool exitFlag = false;

  while (!exitFlag) {
    std::cout << "Enter command (play, pause, next, stop, exit) > ";
    std::cin >> command;
    if (command == "play")
      player.play();
    else if (command == "pause")
      player.pause();
    else if (command == "next")
      player.next();
    else if (command == "stop")
      player.stop();
    else if (command == "exit")
      exitFlag = true;
  }

  return 0;
}
